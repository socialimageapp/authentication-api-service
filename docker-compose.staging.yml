services:
    postgres:
        image: postgres:latest
        container_name: postgres_container
        restart: always
        environment:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: ${SERVICE_PASSWORD_POSTGRES_STAGING}
        ports:
            - "${SERVICE_PORT_POSTGRES_STAGING}:5432"
        volumes:
            - postgres_data:/var/lib/postgresql/data
    pgadmin:
        image: dpage/pgadmin4:latest
        container_name: pgadmin_container
        restart: always
        environment:
            PGADMIN_DEFAULT_EMAIL: admin@admin.com
            PGADMIN_DEFAULT_PASSWORD: ${SERVICE_PASSWORD_PGADMIN_STAGING}
        ports:
            - "${SERVICE_PORT_PGADMIN_STAGING}:80"
        depends_on:
            - postgres
        volumes:
            - pgadmin_data:/var/lib/pgadmin

    redis:
        image: redis:latest
        container_name: redis_container
        restart: always
        hostname: redis
        ports:
            - "${SERVICE_PORT_REDIS_STAGING}:6379"
        volumes:
            - redis_data:/data

    redis-commander:
        image: rediscommander/redis-commander:latest
        container_name: redis_commander_container
        hostname: redis-commander
        restart: always
        environment:
            REDIS_HOSTS: redis_container
        ports:
            - "${SERVICE_PORT_REDIS_COMMANDER_STAGING}:8081"
        depends_on:
            - redis

    fastify-auth:
        build:
            context: . # Use the current directory (where Dockerfile and package.json are)
            dockerfile: Dockerfile
        container_name: fastify_auth_container
        restart: always
        environment:
            # Database connection
            DB_HOST: postgres_container
            DB_PORT: 5432
            DB_USER: postgres
            DB_PASSWORD: ${SERVICE_PASSWORD_POSTGRES_STAGING}
            DB_NAME: auth_db # Adjust if your app uses a specific database name
            # Redis connection
            REDIS_HOST: redis_container
            REDIS_PORT: 6379
            # JWT or other secrets
            JWT_SECRET: ${JWT_SECRET_STAGING} # Define this in your .env
            # App port (if not default 3000)
            PORT: ${SERVICE_PORT_FASTIFY_STAGING:-3000}
        ports:
            - "${SERVICE_PORT_FASTIFY_STAGING:-3000}:3000"
        depends_on:
            - postgres
            - redis
        volumes:
            - ./dist:/app/dist # Optional: for live updates during development

volumes:
    postgres_data:
    pgadmin_data:
    redis_data:
